version: ~> 1.0
language: c
os: linux
dist: bionic
env:
  global:
   # Encrypted COVERITY_SCAN_TOKEN
   - secure: "vtyoBvoe9N6w+O+Mtu51cz0nInPiKZoxXFnjJJ5ToSeE2a5U0x3g7BAFu5Kt30FxwUhL2PsoymH/dnCbHBISqsbJIHRhRaT78DU0Djuj/3VRY3gEtXXO++quNqsAEypVI8nS3xxfvshAch9N91U19ibQWnVXRGZlG6JeL+sfot0="
jobs:
  include:
  - name: "Coverity"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="coverity"
    compiler: clang
    group: edge
    addons:
      coverity_scan:
        project:
          name: "libyal/libmdmp"
          description: "Build submitted via Travis CI"
        notification_email: joachim.metz@gmail.com
        build_command_prepend: "./synclibs.sh && ./autogen.sh && ./configure"
        build_command: "make -j4"
        branch_pattern: master
  - name: "Linux with clang"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-clang"
    compiler: clang
    group: edge
  - name: "Linux with gcc"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc"
    compiler: gcc
    group: edge
  - name: "Linux with gcc on s390x (Docker)"
    env:
    - DOCKERHUB_REPO="s390x/ubuntu"
    - DOCKERHUB_TAG="bionic"
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="docker"
    compiler: gcc
    group: edge
    services:
    - docker
  - name: "Linux with gcc and wide character type (wchar_t) support"
    env:
    - CONFIGURE_OPTIONS="--enable-wide-character-type"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-wide-character-type"
    compiler: gcc
    group: edge
  - name: "Linux with gcc without optimization"
    env:
    - CONFIGURE_OPTIONS="--enable-shared=no --enable-wide-character-type"
    - CFLAGS="--coverage -O0"
    - CPPFLAGS="-DOPTIMIZATION_DISABLED"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-no-optimization"
    compiler: gcc
    group: edge
  - name: "Linux with gcc and shared libraries"
    env:
    - CONFIGURE_OPTIONS=""
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-shared"
    compiler: gcc
    group: edge
  - name: "Linux with gcc, shared libraries and wide character type (wchar_t) support"
    env:
    - CONFIGURE_OPTIONS="--enable-wide-character-type"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-shared-wide-character-type"
    compiler: gcc
    group: edge
  - name: "Linux with gcc and static executables support"
    env:
    - CONFIGURE_OPTIONS="--enable-static-executables=yes --enable-multi-threading-support=no"
    - CFLAGS="--coverage"
    - LDFLAGS="--coverage"
    - TARGET="linux-gcc-static-executables"
    compiler: gcc
    group: edge
  - name: "Mac OS 10.14 with clang"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="macos-clang"
    compiler: clang
    os: osx
    osx_image: xcode11
  - name: "Mac OS 10.14 with gcc"
    env:
    - CONFIGURE_OPTIONS=""
    - TARGET="macos-gcc"
    compiler: gcc
    os: osx
    osx_image: xcode11
  - name: "Mac OS 10.14 with gcc and pkgbuild"
    env:
    - CONFIGURE_OPTIONS="--disable-dependency-tracking --prefix=/usr/local"
    - TARGET="macos-gcc-pkgbuild"
    compiler: gcc
    os: osx
    osx_image: xcode11
before_install:
- .travis/before_install.sh
install:
- .travis/install.sh
script:
- .travis/script.sh
after_success:
- if test ${TARGET} = "linux-gcc-no-optimization"; then
    for DIRECTORY in `find . -maxdepth 1 -type d`; do (cd ${DIRECTORY} && find . -maxdepth 1 -name \*.gcno -type f -exec gcov -pb {} \;) done;
    curl -o codecov.sh -s https://codecov.io/bash && /bin/bash ./codecov.sh -n ${TARGET} -X gcov;
  fi
